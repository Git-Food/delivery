/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.northeastern.cs5500.delivery.controller;

import edu.northeastern.cs5500.delivery.model.Menu;
import edu.northeastern.cs5500.delivery.model.MenuItem;
import edu.northeastern.cs5500.delivery.repository.InMemoryRepository;
import java.util.HashMap;
import java.util.Map;
import org.bson.types.ObjectId;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class MenuControllerTest {
    MenuController menus;

    @BeforeEach
    void init() {
        menus = new MenuController(new InMemoryRepository<Menu>());
    }

    Menu createMenuOne() {
        Menu menu = new Menu();
        menu.setId(new ObjectId());
        menu.setDescription("menu description one");
        menu.setName("menu name one");
        MenuItem menuItem1 = new MenuItem();
        ObjectId menuItemId1 = new ObjectId();
        menuItem1.setObjectId(menuItemId1);
        menuItem1.setName("menuItem1 name");
        menuItem1.setNote("menuItem1 note");
        menuItem1.setPrice(2L);
        MenuItem menuItem2 = new MenuItem();
        ObjectId menuItemId2 = new ObjectId();
        menuItem2.setObjectId(menuItemId2);
        menuItem2.setName("menuItem2 name");
        menuItem2.setNote("menuItem2 note");
        menuItem2.setPrice(3L);
        Map<String, MenuItem> menuItems1 = new HashMap<>();
        menuItems1.put(menuItemId1.toString(), menuItem1);
        menuItems1.put(menuItemId2.toString(), menuItem2);
        return menu;
    }

    Menu createMenuTwo() {
        Menu menu = new Menu();
        menu.setId(new ObjectId());
        menu.setDescription("menu description two");
        menu.setName("menu name two");
        MenuItem menuItem1 = new MenuItem();
        ObjectId menuItemId1 = new ObjectId();
        menuItem1.setObjectId(menuItemId1);
        menuItem1.setName("menuItem3 name");
        menuItem1.setNote("menuItem3 note");
        menuItem1.setPrice(5L);
        MenuItem menuItem2 = new MenuItem();
        ObjectId menuItemId2 = new ObjectId();
        menuItem2.setObjectId(menuItemId2);
        menuItem2.setName("menuItem4 name");
        menuItem2.setNote("menuItem4 note");
        menuItem2.setPrice(7L);
        Map<String, MenuItem> menuItems1 = new HashMap<>();
        menuItems1.put(menuItemId1.toString(), menuItem1);
        menuItems1.put(menuItemId2.toString(), menuItem2);
        return menu;
    }

    @Test
    void testRegisterCreatesValidMenus() throws Exception {
        menus.addMenu(createMenuOne());
        menus.addMenu(createMenuTwo());
        for (Menu menu : menus.getMenus()) {
            Assertions.assertTrue(menu.isValid());
        }
    }

    @Test
    void testCanAddMenu() throws Exception {
        Menu menu1 = createMenuOne();
        menus.addMenu(menu1);
        Assertions.assertEquals(menus.getMenu(menu1.getId()).getName(), menu1.getName());
    }

    @Test
    void testCannotAddMenu() throws Exception {
        Assertions.assertThrows(
                Exception.class,
                () -> {
                    Menu menu = new Menu();
                    menus.addMenu(menu);
                });
    }

    @Test
    void testCanUpdateMenu() throws Exception {
        Menu menu1 = createMenuOne();
        Menu menu2 = createMenuTwo();
        menu2.setId(menu1.getId());
        menus.addMenu(menu1);
        menus.updateMenu(menu2);
        Assertions.assertEquals(menus.getMenu(menu1.getId()).getName(), menu2.getName());
    }

    @Test
    void testCannotUpdateMenu() throws Exception {
        Assertions.assertThrows(
                Exception.class,
                () -> {
                    menus.updateMenu(null);
                });
    }

    @Test
    void testCanDeleteMenu() throws Exception {
        Menu menu1 = createMenuOne();
        menus.addMenu(menu1);
        menus.deleteMenu(menu1.getId());
        Assertions.assertTrue(!menus.getMenus().contains(menu1));
    }
}
