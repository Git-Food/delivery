/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.northeastern.cs5500.delivery.controller;

import static com.google.common.truth.Truth.assertThat;

import edu.northeastern.cs5500.delivery.model.CustomerUser;
import edu.northeastern.cs5500.delivery.model.MenuItem;
import edu.northeastern.cs5500.delivery.model.Order;
import edu.northeastern.cs5500.delivery.model.OrderItem;
import edu.northeastern.cs5500.delivery.model.OrderStatus;
import edu.northeastern.cs5500.delivery.model.ShoppingCart;
import edu.northeastern.cs5500.delivery.repository.InMemoryRepository;

import java.util.HashMap;
import org.bson.types.ObjectId;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class OrderControllerTest {
    OrderController orderController;
    ShoppingCartController shoppingCartController;
    CustomerUser user;

    ObjectId menuItemObjectId1 = new ObjectId();
    ObjectId menuItemObjectId2 = new ObjectId();
    ObjectId menuItemObjectId3 = new ObjectId();
    MenuItem menuItem1 =
            MenuItem.builder()
                    .objectId(menuItemObjectId1)
                    .name("Supreme Pizza")
                    .description("Supreme Pizza description")
                    .price(2)
                    .note("Spicy sauce included")
                    .build();
    MenuItem menuItem2 =
            MenuItem.builder()
                    .objectId(menuItemObjectId2)
                    .name("Pasta")
                    .description("Pasta description")
                    .price(3)
                    .note("Special sauce included")
                    .build();
    MenuItem menuItem3 =
        MenuItem.builder()
                .objectId(menuItemObjectId3)
                .name("Calamari")
                .description("Calamari description")
                .price(5)
                .note("lemon sauce included")
                .build();
    // Order Items
    ObjectId businessId1 = new ObjectId();
    ObjectId businessId2 = new ObjectId();
    ObjectId businessId3 = new ObjectId();

    OrderItem orderItem1 =
            OrderItem.builder().id(new ObjectId()).menuItem(menuItem1).quantity(2).businessId(businessId1).build();
    OrderItem orderItem2 =
            OrderItem.builder().id(new ObjectId()).menuItem(menuItem2).quantity(1).businessId(businessId1).build();
    OrderItem orderItem3 =
            OrderItem.builder().id(new ObjectId()).menuItem(menuItem3).quantity(1).businessId(businessId3).build();
    HashMap<ObjectId, OrderItem> order1Items = new HashMap<>();
    HashMap<ObjectId, OrderItem> order2Items = new HashMap<>();
    HashMap<ObjectId, OrderItem> order3Items = new HashMap<>();
    // Orders
    ObjectId orderId1 = new ObjectId();
    ObjectId orderId2 = new ObjectId();
    ObjectId orderId3 = new ObjectId();
    Order order1 =
            Order.builder()
                    .id(orderId1)
                    .orderItems(order1Items)
                    .customerId(new ObjectId())
                    .businessId(businessId1)
                    .orderStatus(OrderStatus.PENDING)
                    .build();
    Order order2 =
            Order.builder()
                    .id(orderId2)
                    .orderItems(order2Items)
                    .customerId(new ObjectId())
                    .businessId(businessId2)
                    .orderStatus(OrderStatus.PENDING)
                    .build();
    Order order3 =
        Order.builder()
                .id(orderId3)
                .orderItems(order3Items)
                .customerId(new ObjectId())
                .businessId(businessId3)
                .orderStatus(OrderStatus.PENDING)
                .build();

    
    @BeforeEach
    void init() {
        orderController = new OrderController(new InMemoryRepository<Order>());
        shoppingCartController =
                new ShoppingCartController(new InMemoryRepository<ShoppingCart>(), orderController);

        order1Items.put(menuItemObjectId1, orderItem1);
        order1Items.put(menuItemObjectId2, orderItem2);
        order2Items.put(menuItemObjectId1, orderItem1);
        order3Items.put(menuItemObjectId3, orderItem3);

        order1.setOrderItems(order1Items);
        order2.setOrderItems(order2Items);
        order3.setOrderItems(order3Items);
    }

    @Test
    void testCalculateOrderPrice() {
        // System.out.println(order1);
        assertThat(orderController.calculateOrderPrice(order1)).isEqualTo(7);
        assertThat(orderController.calculateOrderPrice(order2)).isEqualTo(4);
    }

    @Test
    void testCalculateItemQuantity() {
        assertThat(orderController.calculateItemQuantity(order1)).isEqualTo(3);
        assertThat(orderController.calculateItemQuantity(order2)).isEqualTo(2);
    }


    @Test
    void testGetOrder() throws Exception {
        // Add orders to Orders to repository
        orderController.addOrder(order1);
        orderController.addOrder(order2);
        assertThat(orderController.getOrder(orderId1)).isEqualTo(order1);
        assertThat(orderController.getOrder(orderId2)).isEqualTo(order2);
    }

    @Test
    void testGetOrders() {
        // Is not empty right away because of dummy data inserted
        // directly inside the OrderController class.
        assertThat(orderController.getOrders()).isNotEmpty();
        // assert collections are equal?
    }

    @Test
    void testCanAddOrder() throws Exception {
        // Add the Order
        orderController.addOrder(order3);
        assertThat(orderController.getOrder(orderId3)).isEqualTo(order3);
    }

    @Test
    void testCanUpdateOrder() throws Exception {
        // Add the Order
        orderController.addOrder(order3);
        // Assert Order is as orignal expected
        assertThat(orderController.getOrder(orderId3)).isEqualTo(order3);
        // Set New Order Status
        order3.setOrderStatus(OrderStatus.UNDER_REVIEW);
        // Update Order
        orderController.updateOrder(order3);
        // Assert new order status
        assertThat(orderController.getOrder(orderId3).getOrderStatus()).isEqualTo(OrderStatus.UNDER_REVIEW);
    }

    // TODO: Test Overloaded update order method.

    @Test
    void testCanDeleteOrder() throws Exception {
        // Add the Order
        orderController.addOrder(order3);
        // Assert Order is as orignal expected
        assertThat(orderController.getOrder(orderId3)).isEqualTo(order3);
        // Delete Order
        orderController.deleteOrder(orderId3);
        // Assert Order has been removed
        assertThat(orderController.getOrders()).doesNotContain(order3);
    }

    // Can't test until we remove dummy shopping cart data from ShoppingCart Constructor
    // @Test
    // void testCanAddOrderItemEmptyCart() throws Exception {
    //     // Remove all dummy data from ShoppingCart
    //     Collection <ShoppingCart> allshoppingCarts = shoppingCartController.getShoppingCarts();
    //     for (ShoppingCart cart : allshoppingCarts) {
    //         shoppingCartController.deleteShoppingCart(cart.getId());
    //     }

    // }

    // @Test
    // void testCanAddOrderItemNoMatchingOrder() {

    // }

    // @Test
    // void testCanAddOrderItemToExistingOrder() {

    // }
}
