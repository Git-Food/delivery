/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.northeastern.cs5500.delivery.controller;

import static com.google.common.truth.Truth.assertThat;

import edu.northeastern.cs5500.delivery.model.MenuItem;
import edu.northeastern.cs5500.delivery.model.Order;
import edu.northeastern.cs5500.delivery.model.OrderItem;
import edu.northeastern.cs5500.delivery.model.OrderStatus;
import edu.northeastern.cs5500.delivery.model.ShoppingCart;
import edu.northeastern.cs5500.delivery.repository.InMemoryRepository;
import java.util.HashMap;
import org.bson.types.ObjectId;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class OrderControllerTest {
    OrderController orderController;
    ShoppingCartController shoppingCartController;
    Order order1;
    Order order2;
    Order order3;
    HashMap<String, OrderItem> order1Items;

    ObjectId orderId1;
    ObjectId orderId2;
    ObjectId orderId3;
    ObjectId customerId1;

    @BeforeEach
    void init() {
        orderController = new OrderController(new InMemoryRepository<Order>());
        shoppingCartController = new ShoppingCartController(new InMemoryRepository<ShoppingCart>(), orderController);

        ObjectId menuItemObjectId1 = new ObjectId();
        ObjectId menuItemObjectId2 = new ObjectId();
        ObjectId menuItemObjectId3 = new ObjectId();

        // Menu Items
        MenuItem menuItem1 = new MenuItem();
        MenuItem menuItem2 = new MenuItem();
        MenuItem menuItem3 = new MenuItem();

        // Order Items
        ObjectId businessId1 = new ObjectId();
        ObjectId businessId2 = new ObjectId();
        // ObjectId businessId3 = new ObjectId();

        OrderItem orderItem1 = new OrderItem();
        OrderItem orderItem2 = new OrderItem();
        OrderItem orderItem3 = new OrderItem();

        order1Items = new HashMap<>();
        HashMap<String, OrderItem> order2Items = new HashMap<>();
        HashMap<String, OrderItem> order3Items = new HashMap<>();

        // Orders
        orderId1 = new ObjectId();
        orderId2 = new ObjectId();
        orderId3 = new ObjectId();

        order1 = new Order();
        order2 = new Order();
        order3 = new Order();

        // CustomerId
        customerId1 = new ObjectId();

        // Menu Item Setup
        menuItem1.setObjectId(menuItemObjectId1);
        menuItem1.setName("Supreme Pizza");
        menuItem1.setDescription("Supreme Pizza description");
        menuItem1.setPrice(2);
        menuItem1.setNote("Spicy sauce included");

        menuItem2.setObjectId(menuItemObjectId2);
        menuItem2.setName("Pasta");
        menuItem2.setDescription("Pasta description");
        menuItem2.setPrice(3);
        menuItem2.setNote("Special sauce included");

        menuItem3.setObjectId(menuItemObjectId3);
        menuItem3.setName("Calamari");
        menuItem3.setDescription("Calamari description");
        menuItem3.setPrice(3);
        menuItem3.setNote("Lemon sauce included");

        // OrderItem Setup
        // orderItem1 and orderitem 2 from same business
        orderItem1.setId(new ObjectId());
        orderItem1.setMenuItem(menuItem1);
        orderItem1.setQuantity(2);
        orderItem1.setBusinessId(businessId1);

        orderItem2.setId(new ObjectId());
        orderItem2.setMenuItem(menuItem2);
        orderItem2.setQuantity(1);
        orderItem2.setBusinessId(businessId1);

        // orderItem3 from different business than Item1&2
        orderItem3.setId(new ObjectId());
        orderItem3.setMenuItem(menuItem3);
        orderItem3.setQuantity(1);
        orderItem3.setBusinessId(businessId2);

        // Order Setup
        order1Items.put(menuItemObjectId1.toString(), orderItem1);
        order1Items.put(menuItemObjectId2.toString(), orderItem2);
        order2Items.put(menuItemObjectId1.toString(), orderItem1);
        order3Items.put(menuItemObjectId3.toString(), orderItem3);

        order1.setId(orderId1);
        order1.setOrderItems(order1Items);
        order1.setCustomerId(customerId1);
        order1.setBusinessId(businessId1);
        order1.setOrderStatus(OrderStatus.UNDER_REVIEW);
        order1.setTotalOrderItemQuantity(order1Items.size());
        order1.setTotalPrice(5);

        // Order 2 is same business different user than Order1
        order2.setId(orderId2);
        order2.setOrderItems(order2Items);
        order2.setCustomerId(new ObjectId()); // will need to link to customer
        order2.setBusinessId(businessId1);
        order2.setOrderStatus(OrderStatus.UNDER_REVIEW);

        order3.setId(orderId3);
        order3.setOrderItems(order3Items);
        order3.setCustomerId(new ObjectId()); // will need to link to customer
        order3.setBusinessId(businessId2);
        order3.setOrderStatus(OrderStatus.PENDING);

        order1.setOrderItems(order1Items);
        order2.setOrderItems(order2Items);
        order3.setOrderItems(order3Items);
    }

    ShoppingCart createTestShoppingCart() {
        ShoppingCart testShoppingCart = new ShoppingCart();
        testShoppingCart.setCustomerId(customerId1);
        testShoppingCart.setId(new ObjectId());
        testShoppingCart.setOrderItems(order1Items);
        long cartPrice = shoppingCartController.calculateShoppingCartPrice(testShoppingCart);
        int cartQuantity = shoppingCartController.calculateShoppingCartQuantity(testShoppingCart);
        testShoppingCart.setTotalPrice(cartPrice);
        testShoppingCart.setTotalQuantity(cartQuantity);
        return testShoppingCart;
    }

    @Test
    void testGetOrder() throws Exception {
        // Add orders to Orders to repository
        orderController.addOrder(order1);
        orderController.addOrder(order2);
        assertThat(orderController.getOrder(orderId1)).isEqualTo(order1);
        assertThat(orderController.getOrder(orderId2)).isEqualTo(order2);
    }

    @Test
    void testGetOrders() {
        // Is not empty right away because of dummy data inserted
        // directly inside the OrderController class.
        assertThat(orderController.getOrders()).isNotEmpty();
        // assert collections are equal?
    }

    @Test
    void testCanAddOrder() throws Exception {
        // Add the Order
        orderController.addOrder(order3);
        assertThat(orderController.getOrder(orderId3)).isEqualTo(order3);
    }

    @Test
    void testCanUpdateOrder() throws Exception {
        // Add the Order
        orderController.addOrder(order3);
        // Assert Order is as orignal expected
        assertThat(orderController.getOrder(orderId3)).isEqualTo(order3);
        // Set New Order Status
        order3.setOrderStatus(OrderStatus.UNDER_REVIEW);
        // Update Order
        orderController.updateOrder(order3);
        // Assert new order status
        assertThat(orderController.getOrder(orderId3).getOrderStatus()).isEqualTo(OrderStatus.UNDER_REVIEW);
    }

    @Test
    void testCanDeleteOrder() throws Exception {
        // Add the Order
        orderController.addOrder(order3);
        // Assert Order is as orignal expected
        assertThat(orderController.getOrder(orderId3)).isEqualTo(order3);
        // Delete Order
        orderController.deleteOrder(orderId3);
        // Assert Order has been removed
        assertThat(orderController.getOrders()).doesNotContain(order3);
    }

    @Test
    void testCanSubmitOrder() throws Exception {
        // Obtain test ShoppinCart w/ items in it
        ShoppingCart testShoppingCart = createTestShoppingCart();
        Order actualOrder = orderController.submitOrder(testShoppingCart);
        Order expectedOrder = order1;
        expectedOrder.setId(actualOrder.getId()); // Only way to match ObjectIds
    }
}
